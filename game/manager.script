-- ! Manager or game manager Logic

-- Manager is responsible for keeping the game state and do transitions
-- For example, turn on discovery mode on start and battle mode on detection
-- and back to discovery if battle is won, or end the game is failed

-- ! Load require components
local camera = require "orthographic.camera"
local e = require "game.events"
local f = require "game.fight.fight_machine"

-- ! Local variables
local interface_url = "/interface"
local discovery_state = hash("discovery")
local fight_state = hash("fight")
local state = discovery_state
local next_action_event = hash("next_fight_action")
local sound_manager = hash("/sound")

go.property("discovery_zoom", 3)
go.property("fight_zoom", 3.5)
go.property("fight_delay", 3)

local function is_enemy_legit(self, enemies, enemy_url)
	local is_legit = false
	for i,line in ipairs(enemies) do
		if line==enemy_url then
			is_legit = true
		end
	end
	return is_legit
end

local function update_entity_state(self, entity_id)
	if state==discovery_state then
		msg.post(entity_id, e.EVENTS.DISCOVERY)
	else
		msg.post(entity_id, e.EVENTS.FIGHT)
	end
end

local function process_action(self, action)
	local char = self.fighter
	if action.is_player then
		char = self.player
	end

	print("FIGHT: ", action.id, char)
	if action.id == f.actions.tire_id then
		msg.post(char, e.EVENTS.USE_STAMINA, { amount = action.value })
	elseif action.id == f.actions.damage_id then
		msg.post(char, e.EVENTS.DAMAGE_RECEIVED, { amount = action.value })
		msg.post(sound_manager, e.EVENTS.PLAY_SOUND, { id = "damage" })
	elseif action.id == f.actions.reset_stamina_id then
		msg.post(char, e.EVENTS.RESET_STAMINA)
	elseif action.id == f.actions.fail_id then
		msg.post(char, e.EVENTS.CANCEL)
	elseif action.id == f.actions.attack_id then
		msg.post(char, e.EVENTS.PERFORM, { id = "attack" })
		msg.post(sound_manager, e.EVENTS.PLAY_SOUND, { id = "attack" })
	elseif action.id == f.actions.prepare_id then
		msg.post(char, e.EVENTS.PREPARE)
	elseif action.id == f.actions.counter_id then
		msg.post(char, e.EVENTS.PERFORM, { id = "block" })
		msg.post(sound_manager, e.EVENTS.PLAY_SOUND, { id = "block" })
	elseif action.id == f.actions.die_id then
		msg.post(char, e.EVENTS.DIE)
		msg.post(sound_manager, e.EVENTS.PLAY_SOUND, { id = "die" })
		if char == self.player then
			msg.post(interface_url, e.EVENTS.GAME_OVER)
			timer.delay(3, true, sys.reboot)
		end
	elseif action.id == f.actions.input_attack_id then
		msg.post(interface_url, e.EVENTS.SHOW_ATTACK, { stamina = action.stamina, delay = action.delay })
	elseif action.id == f.actions.input_counter_id then
		msg.post(interface_url, e.EVENTS.SHOW_COUNTER, { action = action.sequence, delay = action.delay, stamina = action.stamina })
	elseif action.id == f.actions.finish_id then
		msg.post(self.player, e.EVENTS.RESET_STAMINA)
		state = discovery_state
		update_entity_state(self, self.player)
		update_entity_state(self, self.fighter)
		self.fighter = nil
		msg.post("/camera", camera.MSG_ZOOM_TO, { zoom = self.discovery_zoom })
		msg.post("/camera", camera.MSG_FOLLOW_OFFSET, { offset = vmath.vector3(0, 0, 0) })
		msg.post("/interface", e.EVENTS.DISCOVERY)
		msg.post(sound_manager, e.EVENTS.PLAY_MUSIC, { id = "discovery" })
	elseif action.id == f.actions.next_round_id then
		msg.post("#", next_action_event, { delay = 1 })
	end
end

local function next_fight_action(self)
	local player_fight = msg.url(self.player.socket, self.player.path, "char_fight")
	local enemy_fight = msg.url(self.fighter.socket, self.fighter.path, "char_fight")
	print ("Next set of actionw with params for enemy", go.get(enemy_fight, "health"), " and player", go.get(player_fight, "health"))
	self.round = f.next({
		health = go.get(player_fight, "health"),
		stamina = go.get(player_fight, "stamina")
	}, {
		health = go.get(enemy_fight, "health"),
		stamina = go.get(enemy_fight, "stamina")
	})

	print("Trying to settle new action", self.round, self.round.round, self.round.actions)
	msg.post(interface_url, e.EVENTS.SHOW_ROUND, { round = self.round.round })
	for i=1, #self.round.actions do
		local action = self.round.actions[i]
		process_action(self, action)
	end
end

local function counter_done(self, params)
	f.send_input(f.actions.input_counter_id, params)
	msg.post("#", next_action_event, { delay = 0.1 })
end

local function attack_done(self, params)
	f.send_input(f.actions.input_attack_id, params)
	msg.post("#", next_action_event, { delay = 0.1 })
end

local function start_fight(self)
	print("Let the fight start!")
	local char_enemy = msg.url(self.fighter.socket, self.fighter.path, "char_enemy")
	local enemy_level = go.get(char_enemy, "level")
	f.start(enemy_level)

	msg.post("#", next_action_event, { delay = 1 })
end

function init(self)
	self.enemies = {}
	self.player = nil
	self.fighter = nil
	self.round = nil

	state = discovery_state
	msg.post(sound_manager, e.EVENTS.PLAY_MUSIC, { id = "discovery" })
end

function on_message(self, message_id, message, sender)
	if message_id==e.EVENTS.PLAYER_BORN then
		self.player = message.go_id;
		update_entity_state(self, self.player)
	elseif message_id==e.EVENTS.ENEMY_AWAKEN then
		table.insert(self.enemies, message.go_id)
		update_entity_state(self, message.go_id)
	elseif message_id==e.EVENTS.DETECTED then
		if is_enemy_legit(self, self.enemies, message.go_id) and state==discovery_state then
			print("That won't be pretty...")
			msg.post(sound_manager, e.EVENTS.PLAY_MUSIC, { id = "fight" })
			state = fight_state
			self.fighter = message.go_id
			update_entity_state(self, self.player)
			update_entity_state(self, self.fighter)
			msg.post(self.fighter, e.EVENTS.APPROACH, { position=go.get_position(self.player) })
		end
	elseif message_id==e.EVENTS.READY then
		if message.go_id==self.fighter then
			print("Fighters are ready!")
			local player_pos = go.get_position(self.player).x
			local center_pos = (player_pos + go.get_position(self.fighter).x) / 2
			local offset = center_pos - player_pos
			msg.post("/camera", camera.MSG_ZOOM_TO, { zoom = self.fight_zoom })
			msg.post("/camera", camera.MSG_FOLLOW_OFFSET, { offset = vmath.vector3(offset, 0, 0) })
			msg.post("/interface", e.EVENTS.FIGHT)

			start_fight(self)
		end
	elseif message_id==e.EVENTS.COUNTER_SUCCESS then
		counter_done(self, { status = true })
	elseif message_id==e.EVENTS.COUNTER_FAILURE then
		counter_done(self, { status = false, attempt = message.tried })
	elseif message_id==e.EVENTS.ATTACK_DONE then
		print("Attack is ready?", message, message.delay)
		attack_done(self, { sequence = message.sequence })
	elseif message_id==next_action_event then
		print("Next action!", message, message.delay)
		timer.delay(message.delay, false, next_fight_action)
	end
end