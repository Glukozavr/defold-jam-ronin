-- Shadow Logic

-- Shadow is an enemy in Fight Shadow High
-- What is does is detecting the player, coming to him triggering the start of a fight
-- After that - participate in a fight

local e = require "game.events"
local fight_distance = 50

go.property("max_health", 10)
go.property("max_stamina", 10)
go.property("health", 10)
go.property("stamina", 10)

local anim_walk = hash("run")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_attack = hash("attack")
local anim_prepare = hash("prepare")
local manager = hash("/managers/manager")
local stats = "stats"

local function play_idle(self)
	sprite.play_flipbook("#sprite", anim_idle)
end

local function play_animation(self, anim, lock)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		if lock then
			sprite.play_flipbook("#sprite", anim, play_idle)
		else
			sprite.play_flipbook("#sprite", anim)
		end
		-- remember which animation is playing
		self.anim = anim
	end
end

local function approached(self, url, property)
	play_animation(self, anim_idle)
	msg.post(manager, e.EVENTS.READY)
end

local function approach(self, position)
	local local_pos = go.get_position(".")
	local dir = 1
	if local_pos.x < position.x then
		dir = -1
	end

	play_animation(self, anim_walk)
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, (position.x + dir * fight_distance), go.EASING_LINEAR, 1, 0, approached)
end

function init(self)
	msg.post(manager, e.EVENTS.ENEMY_AWAKEN)

	-- the currently playing animation
	self.anim = anim_idle
	msg.post(stats, e.EVENTS.HIDE_STATS)
end

function on_message(self, message_id, message, sender)
	if message_id==e.EVENTS.FIGHT then
		print("BUSTED! Now I will do bad things to you!")
		msg.post(stats, e.EVENTS.UPDATE_STATS, { health = self.health, stamina = self.stamina })
		msg.post(stats, e.EVENTS.SHOW_STATS)
	elseif message_id==e.EVENTS.DISCOVERY then
		print("What a beautiful day!")
	elseif message_id==e.EVENTS.APPROACH then
		approach(self, message.position)
	elseif message_id==e.EVENTS.PERFORM then
		if message.action.anim_id=="attack" then
			print("I will destroy you, knight!")
			play_animation(self, anim_attack, true)
		end
	elseif message_id==e.EVENTS.PREPARE then
		if message.action.anim_id=="attack" then
			print("You will never block my mighty blow!")
			play_animation(self, anim_prepare)
		end
	elseif message_id==e.EVENTS.CANCEL then
		print("Lucky!")
		play_animation(self, anim_idle)
	elseif message_id==e.EVENTS.USE_STAMINA then
		print("COSTS! U was charged", message, message.amount)
		self.stamina = self.stamina - message.amount;
		msg.post(stats, e.EVENTS.UPDATE_STATS, { health = self.health, stamina = self.stamina })
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end