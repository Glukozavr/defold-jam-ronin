-- ! Character fight controller

-- ! Configuration parameters
go.property("max_health", 10)
go.property("max_stamina", 5)
go.property("health", 10)
go.property("stamina", 5)

-- ! Character fight state properties
go.property("in_fight", false)

-- ! Pre-hashing ids improves performance
local manager = hash("/managers/manager")

-- ! Load require components
local events = require "game.characters.char_events"
local e = require "game.events"

local function normalize(value, max_value)
	return math.floor((value / max_value) * 10)
end

local function update_stats(self) 
	msg.post(".", events.msg_command_update_stats, {
		health = normalize(self.health, self.max_health),
		stamina = normalize(self.stamina, self.max_stamina)
	})
end

function init(self)
	self.dead = false
end

function on_message(self, message_id, message, sender)
	if self.dead then
		return
	end
	if message_id==e.EVENTS.DISCOVERY then
		self.in_fight = false
		msg.post(".", events.msg_command_hide_stats)
	elseif message_id==e.EVENTS.FIGHT then
		self.in_fight = true
		update_stats(self)
		msg.post(".", events.msg_command_show_stats)
	elseif message_id==e.EVENTS.PERFORM then
		msg.post(".", events.msg_command_action, { id = message.id })
	elseif message_id==e.EVENTS.PREPARE then
		msg.post(".", events.msg_command_action, { id = "prepare" })
	elseif message_id==e.EVENTS.CANCEL then
		msg.post(".", events.msg_command_action_completed)
	elseif message_id==e.EVENTS.DAMAGE_RECEIVED then
		self.health = self.health - message.amount;
		update_stats(self)
		msg.post(".", events.msg_command_action, { id = "damage" })
	elseif message_id==e.EVENTS.USE_STAMINA then
		self.stamina = self.stamina - message.amount;
		update_stats(self)
	elseif message_id==e.EVENTS.RESET_STAMINA then
		self.stamina = self.max_stamina;
		update_stats(self)
	elseif message_id == e.EVENTS.DIE then
		msg.post(".", events.msg_command_hide_stats)
		msg.post(".", events.msg_command_action, { id = "die" })
		self.dead = true
	end
end
